{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","pressedKey","keyListenerCallback","el","key","setState","document","addEventListener","this","removeEventListener","className","React","Component","ReactDOM","render","getElementById"],"mappings":"oNAMaA,EAAb,4MACEC,MAAyB,CACvBC,WAAY,IAFhB,EAaEC,oBAAsB,SAACC,GACrB,IAAIC,EAAMD,EAAGC,KAAO,GAEL,MAAXD,EAAGC,MACLA,EAAM,SAGR,EAAKC,SAAS,CAAEJ,WAAYG,KApBhC,uDAKE,WACEE,SAASC,iBAAiB,QAASC,KAAKN,uBAN5C,kCASE,WACEI,SAASG,oBAAoB,QAASD,KAAKN,uBAV/C,oBAuBE,WACE,IAAQD,EAAeO,KAAKR,MAApBC,WAER,OACE,qBAAKS,UAAU,MAAf,SACGT,EAEG,mBAAGS,UAAU,eAAb,4CAC+BT,EAD/B,OAIA,8DAlCZ,GAAyBU,IAAMC,W,MCD/BC,IAASC,OACP,cAAC,EAAD,IACAR,SAASS,eAAe,W","file":"static/js/main.d3b82ccf.chunk.js","sourcesContent":["import React from 'react';\n\ntype State = {\n  pressedKey: string;\n};\n\nexport class App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    pressedKey: '',\n  };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.keyListenerCallback);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.keyListenerCallback);\n  }\n\n  keyListenerCallback = (el: KeyboardEvent) => {\n    let key = el.key || '';\n\n    if (el.key === ' ') {\n      key = 'space';\n    }\n\n    this.setState({ pressedKey: key });\n  };\n\n  render() {\n    const { pressedKey } = this.state;\n\n    return (\n      <div className=\"App\">\n        {pressedKey\n          ? (\n            <p className=\"App__message\">\n              {`The last pressed key is [${pressedKey}]`}\n            </p>\n          )\n          : <p>Nothing was pressed yet</p>}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}